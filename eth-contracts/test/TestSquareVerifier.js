// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('SquareVerifier');
var proof = require('./proof.json');
var truffleAssert = require('truffle-assertions');

contract('SquareVerifier', accounts => {
    describe('Testing zokrates proof',  async () => {
        beforeEach(async function () {
            this.contract = await SquareVerifier.new();
        });
        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('should succeed', async function () {
            let result = await this.contract.verifyTx(
                proof.proof.A,
                proof.proof.A_p,
                proof.proof.B,
                proof.proof.B_p,
                proof.proof.C,
                proof.proof.C_p,
                proof.proof.H,
                proof.proof.K,
                proof.input,
            );
            truffleAssert.eventEmitted(result, 'Verified', (ev) => {
                return ev['0'] === 'Transaction successfully verified.';
            });
        });
        // Test verification with incorrect proof
        it('should fail', async function () {
            let result = await this.contract.verifyTx(
                proof.proof.A,
                proof.proof.A_p,
                proof.proof.B,
                proof.proof.B_p,
                proof.proof.C,
                proof.proof.C_p,
                proof.proof.H,
                proof.proof.K,
                [9,2],// change the input
            );
            assert.equal(result.logs.length, 0, "Transaction verification should fail");
        });
    });


});

